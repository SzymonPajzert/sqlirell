{-# OPTIONS_GHC -w #-}
module Grammar.Skel where

-- Haskell module generated by the BNF converter

import           Grammar.Abs
import           Grammar.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdentifier :: Identifier -> Result
transIdentifier x = case x of
  Identifier string -> failure x
transDelimIdent :: DelimIdent -> Result
transDelimIdent x = case x of
  DelimIdent string -> failure x
transDoubleString :: DoubleString -> Result
transDoubleString x = case x of
  DoubleString string -> failure x
transSingleString :: SingleString -> Result
transSingleString x = case x of
  SingleString string -> failure x
transFloatNum :: FloatNum -> Result
transFloatNum x = case x of
  FloatNum string -> failure x
transDoubleNum :: DoubleNum -> Result
transDoubleNum x = case x of
  DoubleNum string -> failure x
transOpenSet :: OpenSet -> Result
transOpenSet x = case x of
  OpenSet string -> failure x
transCloseSet :: CloseSet -> Result
transCloseSet x = case x of
  CloseSet string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prog querys -> failure x
transQuery :: Query -> Result
transQuery x = case x of
  ExpQuer expression      -> failure x
  SelQuer selectstatement -> failure x
transExpression :: Expression -> Result
transExpression x = case x of
  OperExpr opexpr    -> failure x
  CaseExpr caseexpr  -> failure x
  QuanExpr quantexpr -> failure x
transIs :: Is -> Result
transIs x = case x of
  YIs -> failure x
  NIs -> failure x
transAfterNot :: AfterNot -> Result
transAfterNot x = case x of
  BtwnAfterNot opexpr1 opexpr2 -> failure x
  LikeAfterNot opexpr          -> failure x
  IsInAfterNot opexpr          -> failure x
transOpExpr :: OpExpr -> Result
transOpExpr x = case x of
  PathOpExpr pathexpr                  -> failure x
  ExistsOpExpr opexpr                  -> failure x
  ExponeOpExpr opexpr1 opexpr2         -> failure x
  MultipOpExpr opexpr1 opexpr2         -> failure x
  DivisiOpExpr opexpr1 opexpr2         -> failure x
  ModuloOpExpr opexpr1 opexpr2         -> failure x
  AdditiOpExpr opexpr1 opexpr2         -> failure x
  SubstrOpExpr opexpr1 opexpr2         -> failure x
  NegationExpr opexpr                  -> failure x
  PositiveExpr opexpr                  -> failure x
  ConcatOpExpr opexpr1 opexpr2         -> failure x
  IsNullOpExpr opexpr is               -> failure x
  IsMissOpExpr opexpr is               -> failure x
  IsUnknOpExpr opexpr is               -> failure x
  IsBtwnOpExpr opexpr1 opexpr2 opexpr3 -> failure x
  NoAfteOpExpr opexpr afternot         -> failure x
  IsEquaOpExpr opexpr1 opexpr2         -> failure x
  NoEquaOpExpr opexpr1 opexpr2         -> failure x
  GraterOpExpr opexpr1 opexpr2         -> failure x
  GrOrEqOpExpr opexpr1 opexpr2         -> failure x
  SmalerOpExpr opexpr1 opexpr2         -> failure x
  SmOrEqOpExpr opexpr1 opexpr2         -> failure x
  IsLikeOpExpr opexpr1 opexpr2         -> failure x
  IsIn__OpExpr opexpr1 opexpr2         -> failure x
  NegatiOpExp opexpr                   -> failure x
  ConiunOpExp opexpr1 opexpr2          -> failure x
  AlternOpExp opexpr1 opexpr2          -> failure x
transPathExpr :: PathExpr -> Result
transPathExpr x = case x of
  PrimaPathExp primaryexpr          -> failure x
  FieldPathExp pathexpr variableref -> failure x
  INullPathExp pathexpr             -> failure x
  IExprPathExp pathexpr expression  -> failure x
transCaseExpr :: CaseExpr -> Result
transCaseExpr x = case x of
  SimpleCaseExpr expression caseexprtail -> failure x
  SearchCaseExpr caseexprtail            -> failure x
transCaseExprTail :: CaseExprTail -> Result
transCaseExprTail x = case x of
  NoElseCaseTail caseexprbinds            -> failure x
  IsElseCaseTail caseexprbinds expression -> failure x
transCaseExprBind :: CaseExprBind -> Result
transCaseExprBind x = case x of
  CaseExprBind expression1 expression2 -> failure x
transQuantExpr :: QuantExpr -> Result
transQuantExpr x = case x of
  IsEndQuantExpr quantexprhelp -> failure x
transQuaneExpr :: QuaneExpr -> Result
transQuaneExpr x = case x of
  NoEndQuentExpr quantexprhelp -> failure x
transQuantExprHelp :: QuantExprHelp -> Result
transQuantExprHelp x = case x of
  QuantExprHelp exprqualifier quantvariables expression -> failure x
transQuantVariable :: QuantVariable -> Result
transQuantVariable x = case x of
  QuantVariable variableref expression -> failure x
transExprQualifier :: ExprQualifier -> Result
transExprQualifier x = case x of
  SomeExprQual  -> failure x
  EveryExprQuar -> failure x
transPrimaryExpr :: PrimaryExpr -> Result
transPrimaryExpr x = case x of
  LiteralPrimaryExpr literal              -> failure x
  VariablPrimaryExpr variableref          -> failure x
  SubquerPrimaryExpr selectstatement      -> failure x
  FunCallPrimaryExpr pathexpr expressions -> failure x
  ConstruPrimaryExpr constructor          -> failure x
transLiteral :: Literal -> Result
transLiteral x = case x of
  DStringLiteral doublestring -> failure x
  SStringLiteral singlestring -> failure x
  IntegeLiteral integer       -> failure x
  FloatiLiteral floatnum      -> failure x
  DoubleLiteral doublenum     -> failure x
  NullLiteral                 -> failure x
  MissingLiteral              -> failure x
  TrueLiteral                 -> failure x
  FalseLiteral                -> failure x
transStringLiteral :: StringLiteral -> Result
transStringLiteral x = case x of
  DoubleQuoteString identifier -> failure x
  SingleQuoteString identifier -> failure x
transIntegerLiteral :: IntegerLiteral -> Result
transIntegerLiteral x = case x of
  IntegerLiteral integer -> failure x
transConstructor :: Constructor -> Result
transConstructor x = case x of
  ArrayConstr expressions                    -> failure x
  MultisetConst openset expressions closeset -> failure x
  ObjectConstr fieldbindings                 -> failure x
transFieldBinding :: FieldBinding -> Result
transFieldBinding x = case x of
  FieldBinding expression1 expression2 -> failure x
transSelectStatement :: SelectStatement -> Result
transSelectStatement x = case x of
  SelectStmt mwithclause selsetoper morder mlimitclause -> failure x
transSelSetOper :: SelSetOper -> Result
transSelSetOper x = case x of
  SelSetOper selectblock unionedsetss -> failure x
transUnionedSets :: UnionedSets -> Result
transUnionedSets x = case x of
  SelBlockUnionedSets selectblock     -> failure x
  SubqueryUnionedSets selectstatement -> failure x
transSelectBlock :: SelectBlock -> Result
transSelectBlock x = case x of
  FirstSelBlock selclause mfromdefval mwhere mgroup morder mdefval mhaving -> failure x
  SeconSelBlock fromclause mdefval1 mwhere mgroup morder mdefval2 mhaving selclause -> failure x
transMFromDefVal :: MFromDefVal -> Result
transMFromDefVal x = case x of
  IsMFromDefVal fromclause mdefval -> failure x
  NoMFromDefVal                    -> failure x
transMWhere :: MWhere -> Result
transMWhere x = case x of
  IsMWhere whereclause -> failure x
  NoMWhere             -> failure x
transMGroupDefValHaving :: MGroupDefValHaving -> Result
transMGroupDefValHaving x = case x of
  IsMGroupDefValHaving groupbyclause mdefval mhaving -> failure x
  NoMGroupDefValHaving                               -> failure x
transMDefVal :: MDefVal -> Result
transMDefVal x = case x of
  LetMDefVal letclause  -> failure x
  WitMDefVal withclause -> failure x
  NonMDefVal            -> failure x
transSelClause :: SelClause -> Result
transSelClause x = case x of
  SelClause mtypeselclause selregorval -> failure x
transSelRegOrVal :: SelRegOrVal -> Result
transSelRegOrVal x = case x of
  RegSelRegOrVal selreg -> failure x
  ValSelRegOrVal selval -> failure x
transMTypeSelClause :: MTypeSelClause -> Result
transMTypeSelClause x = case x of
  AllMTypeSelClause -> failure x
  DisMTypeSelClause -> failure x
  NonMTypeSelClause -> failure x
transSelReg :: SelReg -> Result
transSelReg x = case x of
  SelReg projections -> failure x
transSelValType :: SelValType -> Result
transSelValType x = case x of
  ValueSelValType -> failure x
  ElemtSelValType -> failure x
  Raw__SelValType -> failure x
transSelVal :: SelVal -> Result
transSelVal x = case x of
  SelVal selvaltype expression -> failure x
transProjection :: Projection -> Result
transProjection x = case x of
  AllProjection                          -> failure x
  ExpProjection expression masidentifier -> failure x
transMAsIdentifier :: MAsIdentifier -> Result
transMAsIdentifier x = case x of
  NoMAsIdent                -> failure x
  IsMAsIdent mas identifier -> failure x
transMAs :: MAs -> Result
transMAs x = case x of
  NoMAs -> failure x
  IsMAs -> failure x
transFromClause :: FromClause -> Result
transFromClause x = case x of
  FromClause fromterms -> failure x
transFromTerm :: FromTerm -> Result
transFromTerm x = case x of
  FromTerm exprmvarmat fromtermjoins -> failure x
transFromTermJoin :: FromTermJoin -> Result
transFromTermJoin x = case x of
  FromTermJoin mjointype joinorunnest -> failure x
transJoinOrUnnest :: JoinOrUnnest -> Result
transJoinOrUnnest x = case x of
  JoinJoinOrUnnest exprmvarmat expression -> failure x
  UnnrJoinOrUnnest unnestclausetype expression mas variable matvar -> failure x
transExprMVarMAt :: ExprMVarMAt -> Result
transExprMVarMAt x = case x of
  ExprMVar expression mmasvar matvar -> failure x
transMMAsVar :: MMAsVar -> Result
transMMAsVar x = case x of
  NoMMAsVar              -> failure x
  IsMMAsVar mas variable -> failure x
transUnnestClauseType :: UnnestClauseType -> Result
transUnnestClauseType x = case x of
  UnnestUnnestClauseType -> failure x
  CorrelUnnestClauseType -> failure x
  FlatteUnnestClauseType -> failure x
transMAtVar :: MAtVar -> Result
transMAtVar x = case x of
  IsMAtVar variable -> failure x
  NoMAtVar          -> failure x
transMJoinType :: MJoinType -> Result
transMJoinType x = case x of
  IsMJoinType jointype -> failure x
  NoMJoinType          -> failure x
transJoinType :: JoinType -> Result
transJoinType x = case x of
  InnerJoinType -> failure x
  LeftNJoinType -> failure x
  LeftIJoinType -> failure x
transWithClause :: WithClause -> Result
transWithClause x = case x of
  WithClause withelements -> failure x
transMWithClause :: MWithClause -> Result
transMWithClause x = case x of
  IsMWithClause withclause -> failure x
  NoMWithClause            -> failure x
transLetClause :: LetClause -> Result
transLetClause x = case x of
  LetClause letletclause letelements -> failure x
transLetLetClause :: LetLetClause -> Result
transLetLetClause x = case x of
  FirstLetLetClause -> failure x
  SeconLetLetClause -> failure x
transLetElement :: LetElement -> Result
transLetElement x = case x of
  LetElement variable expression -> failure x
transWithElement :: WithElement -> Result
transWithElement x = case x of
  WithElement variable expression -> failure x
transWhereClause :: WhereClause -> Result
transWhereClause x = case x of
  WhereClause expression -> failure x
transGroupbyClause :: GroupbyClause -> Result
transGroupbyClause x = case x of
  GroupbyClause exprmvarmats maybegroupas -> failure x
transMGroup :: MGroup -> Result
transMGroup x = case x of
  IsMGroup groupbyclause -> failure x
  NoMGroup               -> failure x
transMaybeGroupAs :: MaybeGroupAs -> Result
transMaybeGroupAs x = case x of
  IsMaybeGroupAs variable maybevarasref -> failure x
  NoMaybeGroupAs                        -> failure x
transMaybeVarAsRef :: MaybeVarAsRef -> Result
transMaybeVarAsRef x = case x of
  IsMaybeVarAsRef varasrefs -> failure x
  NoMaybeVarAsRef           -> failure x
transVarAsRef :: VarAsRef -> Result
transVarAsRef x = case x of
  VarAsRef variable variableref -> failure x
transHavingClause :: HavingClause -> Result
transHavingClause x = case x of
  HavingClause expression -> failure x
transMHaving :: MHaving -> Result
transMHaving x = case x of
  IsMHaving havingclause -> failure x
  NoMHaving              -> failure x
transMOrder :: MOrder -> Result
transMOrder x = case x of
  IsMOrder orderby -> failure x
  NoMOrder         -> failure x
transOrderBy :: OrderBy -> Result
transOrderBy x = case x of
  OrderBy exprorderbyclauses -> failure x
transExprOrderbyClause :: ExprOrderbyClause -> Result
transExprOrderbyClause x = case x of
  ExprOrderByClause expression maybeordorderbyclause -> failure x
transMaybeOrdOrderbyClause :: MaybeOrdOrderbyClause -> Result
transMaybeOrdOrderbyClause x = case x of
  AscOrdClause -> failure x
  DesOrdClause -> failure x
  NonOrdClause -> failure x
transMLimitClause :: MLimitClause -> Result
transMLimitClause x = case x of
  IsMLimitClause limitclause -> failure x
  NoMLimitClause             -> failure x
transLimitClause :: LimitClause -> Result
transLimitClause x = case x of
  LimitClause expression moffsetexpr -> failure x
transMOffsetExpr :: MOffsetExpr -> Result
transMOffsetExpr x = case x of
  IsMOffsetExpr expression -> failure x
  NoMOffsetExpr            -> failure x
transVariableRef :: VariableRef -> Result
transVariableRef x = case x of
  VariableRef identifier -> failure x
  QualifieRef delimident -> failure x
transVariable :: Variable -> Result
transVariable x = case x of
  Variable identifier -> failure x

