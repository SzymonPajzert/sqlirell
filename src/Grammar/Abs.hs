

module Grammar.Abs where

-- Haskell module generated by the BNF converter




newtype Identifier = Identifier String
  deriving (Eq, Ord, Show, Read)
newtype DelimIdent = DelimIdent String
  deriving (Eq, Ord, Show, Read)
newtype DoubleString = DoubleString String
  deriving (Eq, Ord, Show, Read)
newtype SingleString = SingleString String
  deriving (Eq, Ord, Show, Read)
newtype FloatNum = FloatNum String deriving (Eq, Ord, Show, Read)
newtype DoubleNum = DoubleNum String deriving (Eq, Ord, Show, Read)
newtype OpenSet = OpenSet String deriving (Eq, Ord, Show, Read)
newtype CloseSet = CloseSet String deriving (Eq, Ord, Show, Read)
data Program = Prog [Query]
  deriving (Eq, Ord, Show, Read)

data Query = ExpQuer Expression | SelQuer SelectStatement
  deriving (Eq, Ord, Show, Read)

data Expression
    = OperExpr OpExpr | CaseExpr CaseExpr | QuanExpr QuantExpr
  deriving (Eq, Ord, Show, Read)

data Is = YIs | NIs
  deriving (Eq, Ord, Show, Read)

data AfterNot
    = BtwnAfterNot OpExpr OpExpr
    | LikeAfterNot OpExpr
    | IsInAfterNot OpExpr
  deriving (Eq, Ord, Show, Read)

data OpExpr
    = PathOpExpr PathExpr
    | ExistsOpExpr OpExpr
    | ExponeOpExpr OpExpr OpExpr
    | MultipOpExpr OpExpr OpExpr
    | DivisiOpExpr OpExpr OpExpr
    | ModuloOpExpr OpExpr OpExpr
    | AdditiOpExpr OpExpr OpExpr
    | SubstrOpExpr OpExpr OpExpr
    | NegationExpr OpExpr
    | PositiveExpr OpExpr
    | ConcatOpExpr OpExpr OpExpr
    | IsNullOpExpr OpExpr Is
    | IsMissOpExpr OpExpr Is
    | IsUnknOpExpr OpExpr Is
    | IsBtwnOpExpr OpExpr OpExpr OpExpr
    | NoAfteOpExpr OpExpr AfterNot
    | IsEquaOpExpr OpExpr OpExpr
    | NoEquaOpExpr OpExpr OpExpr
    | GraterOpExpr OpExpr OpExpr
    | GrOrEqOpExpr OpExpr OpExpr
    | SmalerOpExpr OpExpr OpExpr
    | SmOrEqOpExpr OpExpr OpExpr
    | IsLikeOpExpr OpExpr OpExpr
    | IsIn__OpExpr OpExpr OpExpr
    | NegatiOpExp OpExpr
    | ConiunOpExp OpExpr OpExpr
    | AlternOpExp OpExpr OpExpr
  deriving (Eq, Ord, Show, Read)

data PathExpr
    = PrimaPathExp PrimaryExpr
    | FieldPathExp PathExpr VariableRef
    | INullPathExp PathExpr
    | IExprPathExp PathExpr Expression
  deriving (Eq, Ord, Show, Read)

data CaseExpr
    = SimpleCaseExpr Expression CaseExprTail
    | SearchCaseExpr CaseExprTail
  deriving (Eq, Ord, Show, Read)

data CaseExprTail
    = NoElseCaseTail [CaseExprBind]
    | IsElseCaseTail [CaseExprBind] Expression
  deriving (Eq, Ord, Show, Read)

data CaseExprBind = CaseExprBind Expression Expression
  deriving (Eq, Ord, Show, Read)

data QuantExpr = IsEndQuantExpr QuantExprHelp
  deriving (Eq, Ord, Show, Read)

data QuaneExpr = NoEndQuentExpr QuantExprHelp
  deriving (Eq, Ord, Show, Read)

data QuantExprHelp
    = QuantExprHelp ExprQualifier [QuantVariable] Expression
  deriving (Eq, Ord, Show, Read)

data QuantVariable = QuantVariable VariableRef Expression
  deriving (Eq, Ord, Show, Read)

data ExprQualifier = SomeExprQual | EveryExprQuar
  deriving (Eq, Ord, Show, Read)

data PrimaryExpr
    = LiteralPrimaryExpr Literal
    | VariablPrimaryExpr VariableRef
    | SubquerPrimaryExpr SelectStatement
    | FunCallPrimaryExpr PathExpr [Expression]
    | ConstruPrimaryExpr Constructor
  deriving (Eq, Ord, Show, Read)

data Literal
    = DStringLiteral DoubleString
    | SStringLiteral SingleString
    | IntegeLiteral Integer
    | FloatiLiteral FloatNum
    | DoubleLiteral DoubleNum
    | NullLiteral
    | MissingLiteral
    | TrueLiteral
    | FalseLiteral
  deriving (Eq, Ord, Show, Read)

data StringLiteral
    = DoubleQuoteString Identifier | SingleQuoteString Identifier
  deriving (Eq, Ord, Show, Read)

data IntegerLiteral = IntegerLiteral Integer
  deriving (Eq, Ord, Show, Read)

data Constructor
    = ArrayConstr [Expression]
    | MultisetConst OpenSet [Expression] CloseSet
    | ObjectConstr [FieldBinding]
  deriving (Eq, Ord, Show, Read)

data FieldBinding = FieldBinding Expression Expression
  deriving (Eq, Ord, Show, Read)

data SelectStatement
    = SelectStmt MWithClause SelSetOper MOrder MLimitClause
  deriving (Eq, Ord, Show, Read)

data SelSetOper = SelSetOper SelectBlock [UnionedSets]
  deriving (Eq, Ord, Show, Read)

data UnionedSets
    = SelBlockUnionedSets SelectBlock
    | SubqueryUnionedSets SelectStatement
  deriving (Eq, Ord, Show, Read)

data SelectBlock
    = FirstSelBlock SelClause MFromDefVal MWhere MGroup MOrder MDefVal MHaving
    | SeconSelBlock FromClause MDefVal MWhere MGroup MOrder MDefVal MHaving SelClause
  deriving (Eq, Ord, Show, Read)

data MFromDefVal = IsMFromDefVal FromClause MDefVal | NoMFromDefVal
  deriving (Eq, Ord, Show, Read)

data MWhere = IsMWhere WhereClause | NoMWhere
  deriving (Eq, Ord, Show, Read)

data MGroupDefValHaving
    = IsMGroupDefValHaving GroupbyClause MDefVal MHaving
    | NoMGroupDefValHaving
  deriving (Eq, Ord, Show, Read)

data MDefVal
    = LetMDefVal LetClause | WitMDefVal WithClause | NonMDefVal
  deriving (Eq, Ord, Show, Read)

data SelClause = SelClause MTypeSelClause SelRegOrVal
  deriving (Eq, Ord, Show, Read)

data SelRegOrVal = RegSelRegOrVal SelReg | ValSelRegOrVal SelVal
  deriving (Eq, Ord, Show, Read)

data MTypeSelClause
    = AllMTypeSelClause | DisMTypeSelClause | NonMTypeSelClause
  deriving (Eq, Ord, Show, Read)

data SelReg = SelReg [Projection]
  deriving (Eq, Ord, Show, Read)

data SelValType
    = ValueSelValType | ElemtSelValType | Raw__SelValType
  deriving (Eq, Ord, Show, Read)

data SelVal = SelVal SelValType Expression
  deriving (Eq, Ord, Show, Read)

data Projection
    = AllProjection | ExpProjection Expression MAsIdentifier
  deriving (Eq, Ord, Show, Read)

data MAsIdentifier = NoMAsIdent | IsMAsIdent MAs Identifier
  deriving (Eq, Ord, Show, Read)

data MAs = NoMAs | IsMAs
  deriving (Eq, Ord, Show, Read)

data FromClause = FromClause [FromTerm]
  deriving (Eq, Ord, Show, Read)

data FromTerm = FromTerm ExprMVarMAt [FromTermJoin]
  deriving (Eq, Ord, Show, Read)

data FromTermJoin = FromTermJoin MJoinType JoinOrUnnest
  deriving (Eq, Ord, Show, Read)

data JoinOrUnnest
    = JoinJoinOrUnnest ExprMVarMAt Expression
    | UnnrJoinOrUnnest UnnestClauseType Expression MAs Variable MAtVar
  deriving (Eq, Ord, Show, Read)

data ExprMVarMAt = ExprMVar Expression MMAsVar MAtVar
  deriving (Eq, Ord, Show, Read)

data MMAsVar = NoMMAsVar | IsMMAsVar MAs Variable
  deriving (Eq, Ord, Show, Read)

data UnnestClauseType
    = UnnestUnnestClauseType
    | CorrelUnnestClauseType
    | FlatteUnnestClauseType
  deriving (Eq, Ord, Show, Read)

data MAtVar = IsMAtVar Variable | NoMAtVar
  deriving (Eq, Ord, Show, Read)

data MJoinType = IsMJoinType JoinType | NoMJoinType
  deriving (Eq, Ord, Show, Read)

data JoinType = InnerJoinType | LeftNJoinType | LeftIJoinType
  deriving (Eq, Ord, Show, Read)

data WithClause = WithClause [WithElement]
  deriving (Eq, Ord, Show, Read)

data MWithClause = IsMWithClause WithClause | NoMWithClause
  deriving (Eq, Ord, Show, Read)

data LetClause = LetClause LetLetClause [LetElement]
  deriving (Eq, Ord, Show, Read)

data LetLetClause = FirstLetLetClause | SeconLetLetClause
  deriving (Eq, Ord, Show, Read)

data LetElement = LetElement Variable Expression
  deriving (Eq, Ord, Show, Read)

data WithElement = WithElement Variable Expression
  deriving (Eq, Ord, Show, Read)

data WhereClause = WhereClause Expression
  deriving (Eq, Ord, Show, Read)

data GroupbyClause = GroupbyClause [ExprMVarMAt] MaybeGroupAs
  deriving (Eq, Ord, Show, Read)

data MGroup = IsMGroup GroupbyClause | NoMGroup
  deriving (Eq, Ord, Show, Read)

data MaybeGroupAs
    = IsMaybeGroupAs Variable MaybeVarAsRef | NoMaybeGroupAs
  deriving (Eq, Ord, Show, Read)

data MaybeVarAsRef = IsMaybeVarAsRef [VarAsRef] | NoMaybeVarAsRef
  deriving (Eq, Ord, Show, Read)

data VarAsRef = VarAsRef Variable VariableRef
  deriving (Eq, Ord, Show, Read)

data HavingClause = HavingClause Expression
  deriving (Eq, Ord, Show, Read)

data MHaving = IsMHaving HavingClause | NoMHaving
  deriving (Eq, Ord, Show, Read)

data MOrder = IsMOrder OrderBy | NoMOrder
  deriving (Eq, Ord, Show, Read)

data OrderBy = OrderBy [ExprOrderbyClause]
  deriving (Eq, Ord, Show, Read)

data ExprOrderbyClause
    = ExprOrderByClause Expression MaybeOrdOrderbyClause
  deriving (Eq, Ord, Show, Read)

data MaybeOrdOrderbyClause
    = AscOrdClause | DesOrdClause | NonOrdClause
  deriving (Eq, Ord, Show, Read)

data MLimitClause = IsMLimitClause LimitClause | NoMLimitClause
  deriving (Eq, Ord, Show, Read)

data LimitClause = LimitClause Expression MOffsetExpr
  deriving (Eq, Ord, Show, Read)

data MOffsetExpr = IsMOffsetExpr Expression | NoMOffsetExpr
  deriving (Eq, Ord, Show, Read)

data VariableRef = VariableRef Identifier | QualifieRef DelimIdent
  deriving (Eq, Ord, Show, Read)

data Variable = Variable Identifier
  deriving (Eq, Ord, Show, Read)

